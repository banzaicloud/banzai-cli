{"version":3,"sources":["webpack:///./dist/banzaicloud/uniform/fesm5/banzaicloud-uniform.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACgC;AACtB;AACM;AACJ;AACA;AACK;AACR;AACA;AACT;AACJ;AACR;AACW;AACH;AACiC;AACM;AACnD;AAC+B;AACwL;AAC9L;AAC7B;AACqI;AAClG;;AAE9D;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,wDAAS;AACzB;AACA;AACA,mCAAmC,gEAAiB;AACpD,iBAAiB;AACjB;AACA;AACA,iBAAiB,OAAO,oDAAK,EAAE;AAC/B,gBAAgB,OAAO,oDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,wBAAwB,yDAAS,GAAG,IAAI;AACxC;AACA,wBAAwB,2DAAY;AACpC,gCAAgC,2DAAY;AAC5C,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB,uDAAQ,GAAG,eAAe;AAClD,aAAa,KAAK;AAClB,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAO;AACjC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,8BAA8B,qBAAqB,EAAE;AACrD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,4DAAS;AAChC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,0DAAO;AACnB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,yDAAS,aAAa;AAC9C,qEAAqE,iEAAS;AAC9E;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,6BAA6B,4DAAS;AACtC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,0DAAO;AACnB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,4BAA4B,yDAAS,eAAe;AACpD;AACA,sBAAsB,iEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,4DAAS;AAChC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,mCAAmC,iBAAiB;AACpD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAO;AACnB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,gCAAgC,+BAA+B,iBAAiB,EAAE,EAAE;AACpF;AACA;AACA;AACA,SAAS,OAAO,wDAAS;AACzB;AACA;AACA,mCAAmC,gEAAiB;AACpD,+DAA+D,gBAAgB,kBAAkB,gBAAgB;AACjH,iBAAiB;AACjB;AACA;AACA,mBAAmB,OAAO,oDAAK,qBAAqB;AACpD,wBAAwB,OAAO,oDAAK,EAAE;AACtC,gBAAgB,OAAO,qDAAM,EAAE;AAC/B,wBAAwB,OAAO,qDAAM,EAAE;AACvC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,wDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,0DAA0D;AAC1D,SAAS,OAAO,yDAAS;AACzB,MAAM;AACN;AACA,6BAA6B,OAAO,oDAAK,EAAE;AAC3C;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAS;AACzB;AACA,uE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CA;AACA,IAAI,wDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,mCAAmC,EAAE;AACrC,4DAA4D,EAAE;AAC9D;AACA,0CAA0C,uDAAQ,sCAAsC,UAAU;AAClG;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA,uCAAuC,QAAQ,gBAAgB;AAC/D;AACA;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA,2CAA2C,yCAAyC;AACpF,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,+BAA+B,yCAAyC;AACxE,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAS;AACzB;AACA,+NAA+N,eAAe,uFAAuF,qBAAqB,weAAwe,qBAAqB,qFAAqF,qBAAqB,8DAA8D,gBAAgB;AAC/gC,mCAAmC,gEAAiB;AACpD,qLAAqL,6BAA6B,+CAA+C,cAAc,YAAY,aAAa,kCAAkC,mBAAmB,kBAAkB,kBAAkB,yBAAyB,eAAe,eAAe,sBAAsB,sDAAsD,iCAAiC,0BAA0B;AAC/jB,iBAAiB;AACjB;AACA;AACA,iBAAiB,OAAO,oDAAK,EAAE;AAC/B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,EAAE;AACxB;AACA,oBAAoB;AACpB;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB;AACtB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAS;AACzB;AACA;AACA,iCAAiC,UAAU,iEAAiB,wDAAwD;AACpH,iBAAiB;AACjB;AACA;AACA,oBAAoB,OAAO,2DAAY,8CAA8C;AACrF,qBAAqB,OAAO,2DAAY,mBAAmB;AAC3D;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,yBAAyB,+EAAe;AACxC;AACA,IAAI,wDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,oFAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,oFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,oFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAS;AACzB;AACA;AACA,iCAAiC,UAAU,sEAAmB,sCAAsC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,wDAAwD;AACxD,SAAS,OAAO,yDAAU,EAAE;AAC5B,SAAS,OAAO,yDAAS,gBAAgB,OAAO,uDAAQ,EAAE,GAAG,OAAO,mDAAI,EAAE,GAAG;AAC7E,SAAS,OAAO,sDAAM,gBAAgB,OAAO,uDAAQ,EAAE,GAAG;AAC1D,SAAS,OAAO,kEAAkB,gBAAgB,OAAO,uDAAQ,EAAE,GAAG;AACtE,SAAS,OAAO,yEAAiB,EAAE;AACnC,SAAS,gCAAgC,OAAO,uDAAQ,EAAE,GAAG,OAAO,mDAAI,EAAE,GAAG,OAAO,qDAAM,SAAS,2EAAwB,IAAI;AAC/H,MAAM;AACN;AACA,kBAAkB,OAAO,oDAAK,EAAE;AAChC,oBAAoB,OAAO,oDAAK,EAAE;AAClC,cAAc,OAAO,oDAAK,EAAE;AAC5B,uBAAuB,OAAO,oDAAK,EAAE;AACrC,oBAAoB,OAAO,oDAAK,EAAE;AAClC,6BAA6B,OAAO,oDAAK,EAAE;AAC3C,iBAAiB,OAAO,oDAAK,EAAE;AAC/B,oBAAoB,OAAO,oDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAQ;AACxB;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,2DAAW;AACnC,wBAAwB,mEAAmB;AAC3C,wBAAwB,4FAAuB;AAC/C,wBAAwB,sEAAc;AACtC,wBAAwB,4EAAiB;AACzC,wBAAwB,wEAAe;AACvC,wBAAwB,wEAAe;AACvC,wBAAwB,6EAAiB;AACzC,wBAAwB,qEAAgB;AACxC,wBAAwB,qEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC,yDAAyD,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAU;AAC3C;AACA;AACA;AACA,iCAAiC,0DAAU;AAC3C;AACA;AACA;AACA,iCAAiC,0DAAU;AAC3C;AACA;AACA;AACA,iCAAiC,0DAAU;AAC3C;AACA;AACA,uBAAuB,EAAE;AACzB,yCAAyC;AACzC;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB,0BAA0B,iCAAG,EAAE,+CAA+C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,2DAAW;AAClC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,wDAAS;AACb;AACA,iCAAiC,uDAAQ,GAAG,UAAU,sCAAsC;AAC5F;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,wDAAS;AACb;AACA,yDAAyD,eAAe,qDAAM;AAC9E,sCAAsC,uDAAQ,GAAG,UAAU,kCAAkC;AAC7F;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,wDAAS;AACb;AACA,oJAAoJ,qDAAM;AAC1J,sCAAsC,uDAAQ,EAAE,qDAAqD,UAAU,kCAAkC;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,wDAAS;AACb;AACA,iCAAiC,uDAAQ,GAAG,UAAU,kCAAkC;AACxF;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,IAAI,wDAAS;AACb;AACA,0GAA0G,qDAAM;AAChH;AACA;AACA,4BAA4B,0DAAU;AACtC;AACA;AACA,4BAA4B,0DAAU;AACtC;AACA,kCAAkC,uDAAQ,GAAG,UAAU,4DAA4D;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,IAAI,wDAAS;AACb;AACA,iCAAiC,uDAAQ,GAAG,UAAU,sCAAsC;AAC5F;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,wDAAS;AACb;AACA,wEAAwE,qDAAM;AAC9E,sCAAsC,uDAAQ,GAAG,UAAU,oCAAoC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,wDAAS;AACb;AACA,iCAAiC,uDAAQ,GAAG,UAAU,sCAAsC;AAC5F;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,SAAS,uDAAQ,GAAG,UAAU,SAAS,0DAAO;AACxE,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,8BAA8B,2CAA2C,EAAE,KAAK,GAAG,EAAE;AACrF;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,oCAAoC,oBAAoB;AACxD,0FAA0F,qDAAM;AAChG,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6EAA6E;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AAC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","file":"main.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/yaml/yaml';\nimport 'codemirror/addon/display/placeholder';\nimport { takeUntil } from 'rxjs/operators';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MAT_INPUT_VALUE_ACCESSOR, MatFormFieldControl } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, Input, ViewEncapsulation, Output, EventEmitter, Directive, ComponentFactoryResolver, ViewChild, ViewContainerRef, HostListener, ElementRef, Inject, Optional, Self, NgModule, Injectable, defineInjectable } from '@angular/core';\nimport { flatten, forEach, mapValues } from 'lodash-es';\nimport * as Ajv from 'ajv';\nimport { FormGroup, NgControl, NG_VALUE_ACCESSOR, FormGroupDirective, NgForm, FormsModule, ReactiveFormsModule, Validators, FormControl } from '@angular/forms';\nimport { __extends, __assign, __values, __rest } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nvar CONTROL_TYPES = {\n    CHECKBOX: 'checkbox',\n    CODE: 'code',\n    FILE: 'file',\n    NUMBER: 'number',\n    PASSWORD: 'password',\n    SELECT: 'select',\n    TEXT: 'text',\n    TEXTAREA: 'textarea',\n};\n/** @enum {string} */\nvar CONTROL_GROUP_TYPES = {\n    AMAZON: 'amazon',\n    AZURE: 'azure',\n    ALIBABA: 'alibaba',\n    GOOGLE: 'google',\n    ORACLE: 'oracle',\n    PASSWORD: 'password',\n    TLS: 'tls',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldComponent = /** @class */ (function () {\n    function FormFieldComponent() {\n    }\n    Object.defineProperty(FormFieldComponent.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.form.controls[this.field.key];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"isValid\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.control.valid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"isTouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.control.touched;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"errorMessage\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var errors = this.control.errors;\n            if (errors) {\n                if (errors.required) {\n                    return 'The field is required';\n                }\n                if (errors.minlength) {\n                    return \"The field must be at least \" + errors.minlength.requiredLength + \" characters long\";\n                }\n                if (errors.maxlength) {\n                    return \"The field must be at most \" + errors.maxlength.requiredLength + \" characters long\";\n                }\n                if (errors.min) {\n                    return \"The field must be more or equal to \" + errors.min.min;\n                }\n                if (errors.max) {\n                    return \"The field must be less or equal to \" + errors.max.max;\n                }\n                if (errors.pattern) {\n                    return \"The field must match the '\" + errors.pattern.requiredPattern + \"' pattern\";\n                }\n                if (errors.custom) {\n                    return errors.custom;\n                }\n                return \"Error: \" + JSON.stringify(errors);\n            }\n            return '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FormFieldComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field',\n                    template: '',\n                    encapsulation: ViewEncapsulation.None\n                }] }\n    ];\n    FormFieldComponent.propDecorators = {\n        field: [{ type: Input }],\n        form: [{ type: Input }]\n    };\n    return FormFieldComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormComponent = /** @class */ (function () {\n    function FormComponent() {\n        this.fields = [];\n        this.form = new FormGroup({}, {});\n        this.groups = [];\n        this.save = new EventEmitter();\n        this.valueChanges = new EventEmitter();\n        this.destroy$ = new Subject();\n    }\n    Object.defineProperty(FormComponent.prototype, \"fieldsByKey\", {\n        get: /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            return this.fields.reduce((/**\n             * @param {?} all\n             * @param {?} field\n             * @return {?}\n             */\n            function (all, field) {\n                var _a;\n                return (__assign({}, all, (_a = {}, _a[field.key] = field, _a)));\n            }), {});\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormComponent.prototype, \"_groups\", {\n        set: /**\n         * @param {?} groups\n         * @return {?}\n         */\n        function (groups) {\n            if (!groups) {\n                return;\n            }\n            this.groups = groups;\n            this.fields = flatten(this.groups.map((/**\n             * @param {?} group\n             * @return {?}\n             */\n            function (group) { return group.fields; })));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var controls = mapValues(this.fieldsByKey, (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var control = _a.control;\n            return control;\n        }));\n        // set initial state\n        if (this.initialValue) {\n            forEach(this.initialValue, (/**\n             * @param {?} val\n             * @param {?} key\n             * @return {?}\n             */\n            function (val, key) {\n                /** @type {?} */\n                var control = controls[key];\n                if (control) {\n                    control.setValue(val);\n                }\n            }));\n        }\n        this.form = new FormGroup(controls, {});\n        this._valueChangesSubscription = this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(this.valueChanges);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        if (changes['_groups'] && !changes['_groups'].isFirstChange()) {\n            /** @type {?} */\n            var controls_1 = mapValues(this.fieldsByKey, (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            function (_a) {\n                var control = _a.control;\n                return control;\n            }));\n            // keep current save\n            forEach(this.form.value, (/**\n             * @param {?} val\n             * @param {?} key\n             * @return {?}\n             */\n            function (val, key) {\n                /** @type {?} */\n                var newControl = controls_1[key];\n                /** @type {?} */\n                var currentControl = _this.form.controls[key];\n                if (newControl) {\n                    newControl.setValue(val);\n                    if (currentControl.touched) {\n                        newControl.markAsTouched({ onlySelf: true });\n                    }\n                }\n            }));\n            if (this._valueChangesSubscription) {\n                this._valueChangesSubscription.unsubscribe();\n            }\n            this.form = new FormGroup(controls_1, {});\n            this._valueChangesSubscription = this.form.valueChanges\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(this.valueChanges);\n            this.valueChanges.emit(this.form.value);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.destroy$.next();\n        this.destroy$.complete();\n    };\n    /**\n     * @return {?}\n     */\n    FormComponent.prototype.onReset = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var defaults = mapValues(this.fieldsByKey, (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var defaultValue = _a.default;\n            return defaultValue;\n        }));\n        this.form.reset(defaults, { onlySelf: true });\n    };\n    /**\n     * @return {?}\n     */\n    FormComponent.prototype.onSave = /**\n     * @return {?}\n     */\n    function () {\n        if (this.form.valid) {\n            this.save.emit(this.form.getRawValue());\n        }\n        else {\n            forEach(this.form.controls, (/**\n             * @param {?} control\n             * @return {?}\n             */\n            function (control) { return control.markAsTouched({ onlySelf: true }); }));\n        }\n    };\n    FormComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form',\n                    template: \"<form class=\\\"bcu-form\\\" [formGroup]=\\\"form\\\" fxLayout=\\\"column\\\">\\n  <bcu-form-group\\n    *ngFor=\\\"let group of groups\\\"\\n    [form]=\\\"form\\\"\\n    [name]=\\\"group.name\\\"\\n    [description]=\\\"group.description\\\"\\n    [link]=\\\"group.link\\\"\\n    [fields]=\\\"group.fields\\\"\\n  ></bcu-form-group>\\n  <div *ngIf=\\\"groups.length\\\" class=\\\"bcu-form-actions\\\" fxLayout=\\\"row\\\">\\n    <button fxFlex mat-button (click)=\\\"onReset()\\\">Clear</button>\\n    <button fxFlex mat-button (click)=\\\"onSave()\\\">Save</button>\\n  </div>\\n</form>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\"bcu-form-group:not(:first-child){margin-top:32px}.bcu-form-actions{margin-top:48px}\"]\n                }] }\n    ];\n    FormComponent.propDecorators = {\n        _groups: [{ type: Input, args: ['groups',] }],\n        initialValue: [{ type: Input }],\n        save: [{ type: Output }],\n        valueChanges: [{ type: Output }]\n    };\n    return FormComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DisableControlDirective = /** @class */ (function () {\n    function DisableControlDirective(ngControl) {\n        this.ngControl = ngControl;\n    }\n    Object.defineProperty(DisableControlDirective.prototype, \"bcuDisableControl\", {\n        set: /**\n         * @param {?} condition\n         * @return {?}\n         */\n        function (condition) {\n            var _this = this;\n            setTimeout((/**\n             * @return {?}\n             */\n            function () {\n                if (condition) {\n                    _this.ngControl.control.disable();\n                }\n                else {\n                    _this.ngControl.control.enable();\n                }\n            }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DisableControlDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[bcuDisableControl]',\n                },] }\n    ];\n    /** @nocollapse */\n    DisableControlDirective.ctorParameters = function () { return [\n        { type: NgControl }\n    ]; };\n    DisableControlDirective.propDecorators = {\n        bcuDisableControl: [{ type: Input }]\n    };\n    return DisableControlDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormGroupComponent = /** @class */ (function () {\n    function FormGroupComponent() {\n    }\n    FormGroupComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-group',\n                    template: \"<div class=\\\"bcu-form-group\\\">\\n  <h3>{{ name }}</h3>\\n  <p *ngIf=\\\"description\\\">{{ description }}</p>\\n  <a *ngIf=\\\"link\\\" [href]=\\\"link\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">{{ link }}</a>\\n  <div class=\\\"bcu-form-group-fields\\\">\\n    <ng-container *ngFor=\\\"let field of fields\\\">\\n      <bcu-form-field-container\\n        [ngClass]=\\\"{ hidden: field.isHidden(form.value) }\\\"\\n        [form]=\\\"form\\\"\\n        [field]=\\\"field\\\"\\n      ></bcu-form-field-container>\\n    </ng-container>\\n  </div>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\".bcu-form-group h3{font-size:16px;font-weight:700;line-height:1.5;letter-spacing:.2px;height:24px;margin:0 0 16px}.bcu-form-group p{padding:0;margin:0}.bcu-form-group a{font-size:75%;line-height:1.5;letter-spacing:.2px;margin:0;padding:0}.bcu-form-group .bcu-form-group-fields{margin-top:16px}.bcu-form-group .hidden{display:none}\"]\n                }] }\n    ];\n    FormGroupComponent.propDecorators = {\n        form: [{ type: Input }],\n        name: [{ type: Input }],\n        description: [{ type: Input }],\n        link: [{ type: Input }],\n        fields: [{ type: Input }]\n    };\n    return FormGroupComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldContainerComponent = /** @class */ (function () {\n    function FormFieldContainerComponent(componentFactoryResolver) {\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n    /**\n     * @return {?}\n     */\n    FormFieldContainerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (this.field.component) {\n            /** @type {?} */\n            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.field.component);\n            this.containerRef.clear();\n            this.componentRef = this.containerRef.createComponent(componentFactory);\n            if (this.componentRef.instance) {\n                Object.assign(this.componentRef.instance, {\n                    form: this.form,\n                    field: this.field,\n                });\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormFieldContainerComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        if (this.componentRef && this.componentRef.instance) {\n            Object.assign(this.componentRef.instance, {\n                form: this.form,\n                field: this.field,\n            });\n        }\n    };\n    FormFieldContainerComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-container',\n                    template: \"<div class=\\\"bcu-form-field-container\\\">\\n  <section fxLayout=\\\"column\\\">\\n    <ng-container #container></ng-container>\\n  </section>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\".bcu-form-field-container label{text-transform:uppercase}.bcu-form-field-container .mat-form-field{margin-top:16px;line-height:1.5;letter-spacing:.2px}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    FormFieldContainerComponent.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver }\n    ]; };\n    FormFieldContainerComponent.propDecorators = {\n        field: [{ type: Input }],\n        form: [{ type: Input }],\n        containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]\n    };\n    return FormFieldContainerComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldCodeComponent = /** @class */ (function (_super) {\n    __extends(FormFieldCodeComponent, _super);\n    function FormFieldCodeComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(FormFieldCodeComponent.prototype, \"options\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return __assign({ lineNumbers: true, theme: 'material', mode: { name: 'javascript', json: true }, viewportMargin: 100, matchBrackets: true, lineWrapping: true }, this.field.options, { readOnly: this.field.isDisabled(this.form.value), placeholder: this.field.placeholder });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FormFieldCodeComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-code',\n                    template: \"<div [formGroup]=\\\"form\\\" class=\\\"bcu-form-field-code\\\" fxFlex>\\n  <mat-form-field floatLabel=\\\"always\\\" class=\\\"mat-form-field--no-underline\\\" fxFlex>\\n    <input matInput [id]=\\\"field.key\\\" [formControlName]=\\\"field.key\\\" [required]=\\\"field.required\\\" style=\\\"display: none\\\" />\\n    <mat-label>{{ field.label }}</mat-label>\\n\\n    <ngx-codemirror [formControlName]=\\\"field.key\\\" [options]=\\\"options\\\"></ngx-codemirror>\\n\\n    <mat-hint *ngIf=\\\"field.description\\\" align=\\\"start\\\">{{ field.description }}</mat-hint>\\n    <mat-error *ngIf=\\\"isTouched && !isValid\\\">{{ errorMessage }}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\".bcu-form-field-code .mat-form-field--no-underline .mat-form-field-ripple,.bcu-form-field-code .mat-form-field--no-underline .mat-form-field-underline{background-color:transparent}\"]\n                }] }\n    ];\n    FormFieldCodeComponent.propDecorators = {\n        field: [{ type: Input }]\n    };\n    return FormFieldCodeComponent;\n}(FormFieldComponent));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldInputComponent = /** @class */ (function (_super) {\n    __extends(FormFieldInputComponent, _super);\n    function FormFieldInputComponent() {\n        return _super.call(this) || this;\n    }\n    FormFieldInputComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-input',\n                    template: \"<div [formGroup]=\\\"form\\\" fxFlex>\\n  <mat-form-field floatLabel=\\\"always\\\" fxFlex=\\\"\\\">\\n    <mat-label>{{ field.label }}</mat-label>\\n    <input\\n      matInput\\n      [type]=\\\"field.controlType\\\"\\n      [formControlName]=\\\"field.key\\\"\\n      [id]=\\\"field.key\\\"\\n      [required]=\\\"field.required\\\"\\n      [placeholder]=\\\"field.placeholder\\\"\\n      [bcuDisableControl]=\\\"field.isDisabled(form.value)\\\"\\n    />\\n\\n    <mat-hint *ngIf=\\\"field.description\\\" align=\\\"start\\\">{{ field.description }}</mat-hint>\\n    <mat-error *ngIf=\\\"isTouched && !isValid\\\">{{ errorMessage }}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\"\"]\n                }] }\n    ];\n    /** @nocollapse */\n    FormFieldInputComponent.ctorParameters = function () { return []; };\n    return FormFieldInputComponent;\n}(FormFieldComponent));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldTextareaComponent = /** @class */ (function (_super) {\n    __extends(FormFieldTextareaComponent, _super);\n    function FormFieldTextareaComponent() {\n        return _super.call(this) || this;\n    }\n    FormFieldTextareaComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-textarea',\n                    template: \"<div [formGroup]=\\\"form\\\" fxFlex>\\n  <mat-form-field floatLabel=\\\"always\\\" fxFlex>\\n    <mat-label>{{ field.label }}</mat-label>\\n\\n    <textarea\\n      matInput\\n      [formControlName]=\\\"field.key\\\"\\n      [id]=\\\"field.key\\\"\\n      [required]=\\\"field.required\\\"\\n      [placeholder]=\\\"field.placeholder\\\"\\n      [bcuDisableControl]=\\\"field.isDisabled(form.value)\\\"\\n    ></textarea>\\n\\n    <mat-hint *ngIf=\\\"field.description\\\" align=\\\"start\\\">{{ field.description }}</mat-hint>\\n    <mat-error *ngIf=\\\"isTouched && !isValid\\\">{{ errorMessage }}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\"\"]\n                }] }\n    ];\n    /** @nocollapse */\n    FormFieldTextareaComponent.ctorParameters = function () { return []; };\n    return FormFieldTextareaComponent;\n}(FormFieldComponent));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldSelectComponent = /** @class */ (function (_super) {\n    __extends(FormFieldSelectComponent, _super);\n    function FormFieldSelectComponent() {\n        return _super.call(this) || this;\n    }\n    FormFieldSelectComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-select',\n                    template: \"<div [formGroup]=\\\"form\\\" fxFlex>\\n  <mat-form-field floatLabel=\\\"always\\\" fxFlex>\\n    <mat-label>{{ field.label }}</mat-label>\\n    <mat-select\\n      [id]=\\\"field.key\\\"\\n      [formControlName]=\\\"field.key\\\"\\n      [required]=\\\"field.required\\\"\\n      [placeholder]=\\\"field.placeholder\\\"\\n      [bcuDisableControl]=\\\"field.isDisabled(form.value)\\\"\\n    >\\n      <mat-option *ngFor=\\\"let opt of field.options\\\" [value]=\\\"opt.value || opt\\\">{{ opt.label || opt }}</mat-option>\\n    </mat-select>\\n\\n    <mat-hint *ngIf=\\\"field.description\\\" align=\\\"start\\\">{{ field.description }}</mat-hint>\\n    <mat-error *ngIf=\\\"isTouched && !isValid\\\">{{ errorMessage }}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\"\"]\n                }] }\n    ];\n    /** @nocollapse */\n    FormFieldSelectComponent.ctorParameters = function () { return []; };\n    FormFieldSelectComponent.propDecorators = {\n        field: [{ type: Input }]\n    };\n    return FormFieldSelectComponent;\n}(FormFieldComponent));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldCheckboxComponent = /** @class */ (function (_super) {\n    __extends(FormFieldCheckboxComponent, _super);\n    function FormFieldCheckboxComponent() {\n        return _super.call(this) || this;\n    }\n    FormFieldCheckboxComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-checkbox',\n                    template: \"<div [formGroup]=\\\"form\\\" class=\\\"bcu-form-field-checkbox\\\" fxFlex>\\n  <mat-form-field floatLabel=\\\"always\\\" class=\\\"mat-form-field--no-underline\\\" fxFlex>\\n    <input matInput [id]=\\\"field.key\\\" [formControlName]=\\\"field.key\\\" [required]=\\\"field.required\\\" style=\\\"display: none\\\" />\\n    <mat-label *ngIf=\\\"field.placeholder\\\">{{ field.placeholder }}</mat-label>\\n    <mat-checkbox\\n      [formControlName]=\\\"field.key\\\"\\n      [id]=\\\"field.key\\\"\\n      [required]=\\\"field.required\\\"\\n      [bcuDisableControl]=\\\"field.isDisabled(form.value)\\\"\\n    >\\n      {{ field.label }}\\n    </mat-checkbox>\\n\\n    <mat-hint *ngIf=\\\"field.description\\\" align=\\\"start\\\">{{ field.description }}</mat-hint>\\n    <mat-error *ngIf=\\\"isTouched && !isValid\\\">{{ errorMessage }}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\".bcu-form-field-checkbox .mat-form-field--no-underline .mat-form-field-ripple,.bcu-form-field-checkbox .mat-form-field--no-underline .mat-form-field-underline{background-color:transparent}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    FormFieldCheckboxComponent.ctorParameters = function () { return []; };\n    return FormFieldCheckboxComponent;\n}(FormFieldComponent));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldFileComponent = /** @class */ (function (_super) {\n    __extends(FormFieldFileComponent, _super);\n    function FormFieldFileComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.dragActive = false;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormFieldFileComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        if (this.form && this.field && this.field.default) {\n            /** @type {?} */\n            var control = this.form.controls[this.field.key];\n            if (control) {\n                control.setValue(this.field.default);\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {?} files\n     * @return {?}\n     */\n    FormFieldFileComponent.prototype.onFile = /**\n     * @private\n     * @param {?} files\n     * @return {?}\n     */\n    function (files) {\n        var _this = this;\n        /** @type {?} */\n        var file = files[0];\n        if (file) {\n            /** @type {?} */\n            var reader_1 = new FileReader();\n            reader_1.onload = (/**\n             * @return {?}\n             */\n            function () {\n                var e_1, _a;\n                _this.form.controls[_this.field.key].setValue(reader_1.result);\n                if (_this.field.fillForm) {\n                    /** @type {?} */\n                    var baseKey = _this.field.key.split('.')[0];\n                    try {\n                        /** @type {?} */\n                        var result = JSON.parse((/** @type {?} */ (reader_1.result)));\n                        try {\n                            for (var _b = __values(Object.keys(result)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                                var key = _c.value;\n                                /** @type {?} */\n                                var control = _this.form.controls[baseKey + \".\" + key];\n                                if (control) {\n                                    control.setValue(result[key]);\n                                    control.markAsTouched({ onlySelf: true });\n                                }\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                    }\n                    catch (err) {\n                        /** @type {?} */\n                        var control = _this.form.controls[_this.field.key];\n                        control.setErrors({ custom: 'Failed to parse file as JSON' });\n                        control.markAsTouched({ onlySelf: true });\n                        console.log(err);\n                    }\n                }\n            });\n            reader_1.readAsText(file);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormFieldFileComponent.prototype.onFileSelect = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this.onFile(event.target.files);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormFieldFileComponent.prototype.onDrop = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        event.preventDefault();\n        if (this.field.fillForm && !event.dataTransfer.files.length) {\n            /** @type {?} */\n            var control = this.form.controls[this.field.key];\n            control.setErrors({ custom: 'Failed to parse file as JSON' });\n            control.markAsTouched({ onlySelf: true });\n            return;\n        }\n        this.onFile(event.dataTransfer.files);\n        this.dragActive = false;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormFieldFileComponent.prototype.onDragOver = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.dragActive = true;\n    };\n    /**\n     * @return {?}\n     */\n    FormFieldFileComponent.prototype.onDragLeave = /**\n     * @return {?}\n     */\n    function () {\n        this.dragActive = false;\n    };\n    FormFieldFileComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bcu-form-field-file',\n                    template: \"<div [formGroup]=\\\"form\\\" class=\\\"bcu-form-field-file\\\" fxFlex>\\n  <mat-form-field floatLabel=\\\"always\\\" class=\\\"mat-form-field--no-underline\\\" fxFlex>\\n    <mat-label *ngIf=\\\"field.label\\\">{{ field.label }}</mat-label>\\n    <label\\n      class=\\\"bcu-form-field-file-drop\\\"\\n      [ngClass]=\\\"{ active: dragActive }\\\"\\n      (drop)=\\\"onDrop($event)\\\"\\n      (dragover)=\\\"onDragOver($event)\\\"\\n      (dragleave)=\\\"onDragLeave()\\\"\\n    >\\n      <input\\n        bcuMatFileInput\\n        type=\\\"file\\\"\\n        style=\\\"display:none\\\"\\n        [accept]=\\\"field.accept\\\"\\n        [id]=\\\"field.key\\\"\\n        [formControlName]=\\\"field.key\\\"\\n        [required]=\\\"field.required\\\"\\n        [bcuDisableControl]=\\\"field.isDisabled(form.value)\\\"\\n        (change)=\\\"onFileSelect($event)\\\"\\n      />\\n      <span>{{ field.placeholder }}</span>\\n    </label>\\n\\n    <mat-hint *ngIf=\\\"field.description\\\" align=\\\"start\\\">{{ field.description }}</mat-hint>\\n    <mat-error *ngIf=\\\"isTouched && !isValid\\\">{{ errorMessage }}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                    encapsulation: ViewEncapsulation.None,\n                    styles: [\".bcu-form-field-file .mat-form-field--no-underline .mat-form-field-ripple,.bcu-form-field-file .mat-form-field--no-underline .mat-form-field-underline{background-color:transparent}.bcu-form-field-file .bcu-form-field-file-drop{display:block;margin:auto;height:100px;border:1px dotted rgba(0,0,0,.42);border-radius:16px;text-align:center;line-height:100px;text-transform:uppercase;cursor:pointer;font-size:16px;color:rgba(0,0,0,.54)}.bcu-form-field-file .bcu-form-field-file-drop.active{border:1px solid rgba(0,0,0,.42);background:rgba(0,0,0,.1)}\"]\n                }] }\n    ];\n    FormFieldFileComponent.propDecorators = {\n        field: [{ type: Input }]\n    };\n    return FormFieldFileComponent;\n}(FormFieldComponent));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FileValueAccessorDirective = /** @class */ (function () {\n    function FileValueAccessorDirective() {\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        function (_) { });\n        this.onTouched = (/**\n         * @return {?}\n         */\n        function () { });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    FileValueAccessorDirective.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FileValueAccessorDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FileValueAccessorDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    FileValueAccessorDirective.decorators = [\n        { type: Directive, args: [{\n                    // tslint:disable-next-line directive-selector\n                    selector: 'input[type=file]',\n                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileValueAccessorDirective, multi: true }],\n                },] }\n    ];\n    FileValueAccessorDirective.propDecorators = {\n        onChange: [{ type: HostListener, args: ['change', ['$event.target.files'],] }],\n        onTouched: [{ type: HostListener, args: ['blur',] }]\n    };\n    return FileValueAccessorDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatInput.\nvar  \n// Boilerplate for applying mixins to MatInput.\nMatInputBase = /** @class */ (function () {\n    function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatInputBase;\n}());\n/** @type {?} */\nvar _MatInputMixinBase = mixinErrorState(MatInputBase);\nvar MatFileInputDirective = /** @class */ (function (_super) {\n    __extends(MatFileInputDirective, _super);\n    function MatFileInputDirective(_elementRef, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor) {\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._elementRef = _elementRef;\n        _this.ngControl = ngControl;\n        _this._uid = \"bcu-mat-file-input-\" + MatFileInputDirective.nextId++;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        _this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        _this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        _this.controlType = 'bcu-mat-file-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        _this.autofilled = false;\n        _this._disabled = false;\n        _this._required = false;\n        _this._readonly = false;\n        /** @type {?} */\n        var element = _this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        _this._inputValueAccessor = inputValueAccessor || element;\n        _this._previousNativeValue = _this.value;\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        return _this;\n    }\n    Object.defineProperty(MatFileInputDirective.prototype, \"disabled\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * @return {?}\n         */\n        function () {\n            if (this.ngControl && this.ngControl.disabled !== null) {\n                return this.ngControl.disabled;\n            }\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // Browsers may not fire the blur event if the input is disabled too quickly.\n            // Reset from here to ensure that the element doesn't become stuck.\n            if (this.focused) {\n                this.focused = false;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFileInputDirective.prototype, \"id\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * @return {?}\n         */\n        function () {\n            return this._id;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._id = value || this._uid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFileInputDirective.prototype, \"required\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * @return {?}\n         */\n        function () {\n            return this._required;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFileInputDirective.prototype, \"value\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * @return {?}\n         */\n        function () {\n            return this._inputValueAccessor.value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this.value) {\n                this._inputValueAccessor.value = value;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFileInputDirective.prototype, \"readonly\", {\n        /** Whether the element is readonly. */\n        get: /**\n         * Whether the element is readonly.\n         * @return {?}\n         */\n        function () {\n            return this._readonly;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._readonly = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatFileInputDirective.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatFileInputDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.complete();\n    };\n    /**\n     * @return {?}\n     */\n    MatFileInputDirective.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    };\n    /** Focuses the input. */\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    MatFileInputDirective.prototype.focus = /**\n     * Focuses the input.\n     * @return {?}\n     */\n    function () {\n        this._elementRef.nativeElement.focus();\n    };\n    /** Callback for the cases where the focused state of the input changes. */\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    MatFileInputDirective.prototype._focusChanged = /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    function (isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatFileInputDirective.prototype._onInput = /**\n     * @return {?}\n     */\n    function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /** Does some manual dirty checking on the native input `value` property. */\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    MatFileInputDirective.prototype._dirtyCheckNativeValue = /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    };\n    Object.defineProperty(MatFileInputDirective.prototype, \"empty\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * @return {?}\n         */\n        function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFileInputDirective.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * @return {?}\n         */\n        function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Implemented as part of MatFormFieldControl.\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @param {?} ids\n     * @return {?}\n     */\n    MatFileInputDirective.prototype.setDescribedByIds = /**\n     * Implemented as part of MatFormFieldControl.\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) {\n        this._ariaDescribedby = ids.join(' ');\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @return {?}\n     */\n    MatFileInputDirective.prototype.onContainerClick = /**\n     * Implemented as part of MatFormFieldControl.\n     * @return {?}\n     */\n    function () {\n        // Do not re-focus the input element if the element is already focused.\n        if (!this.focused) {\n            this.focus();\n        }\n    };\n    MatFileInputDirective.nextId = 0;\n    MatFileInputDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=file][bcuMatFileInput]',\n                    exportAs: 'bcuMatFileInput',\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatFileInputDirective }],\n                    // tslint:disable-next-line\n                    host: {\n                        class: 'mat-input-element',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.readonly]': 'readonly',\n                        '[accept]': 'accept',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-required]': 'required.toString()',\n                        '(blur)': '_focusChanged(false)',\n                        '(focus)': '_focusChanged(true)',\n                        '(input)': '_onInput()',\n                    },\n                },] }\n    ];\n    /** @nocollapse */\n    MatFileInputDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: ErrorStateMatcher },\n        { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] }\n    ]; };\n    MatFileInputDirective.propDecorators = {\n        accept: [{ type: Input }],\n        disabled: [{ type: Input }],\n        id: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        errorStateMatcher: [{ type: Input }],\n        value: [{ type: Input }],\n        readonly: [{ type: Input }]\n    };\n    return MatFileInputDirective;\n}(_MatInputMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar UniformModule = /** @class */ (function () {\n    function UniformModule() {\n    }\n    UniformModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        BrowserAnimationsModule,\n                        MatInputModule,\n                        MatCheckboxModule,\n                        MatSelectModule,\n                        MatButtonModule,\n                        MatSnackBarModule,\n                        FlexLayoutModule,\n                        CodemirrorModule,\n                    ],\n                    exports: [\n                        FormFieldCodeComponent,\n                        FormFieldInputComponent,\n                        FormFieldTextareaComponent,\n                        FormFieldSelectComponent,\n                        FormFieldCheckboxComponent,\n                        FormFieldFileComponent,\n                        FormFieldComponent,\n                        FormComponent,\n                        DisableControlDirective,\n                        FormGroupComponent,\n                        FormFieldContainerComponent,\n                        FormFieldCodeComponent,\n                        FormFieldInputComponent,\n                        FormFieldTextareaComponent,\n                        FormFieldSelectComponent,\n                        FormFieldCheckboxComponent,\n                        FormFieldFileComponent,\n                        FileValueAccessorDirective,\n                        MatFileInputDirective,\n                    ],\n                    entryComponents: [\n                        FormFieldCodeComponent,\n                        FormFieldInputComponent,\n                        FormFieldTextareaComponent,\n                        FormFieldSelectComponent,\n                        FormFieldCheckboxComponent,\n                        FormFieldFileComponent,\n                    ],\n                    declarations: [\n                        FormFieldComponent,\n                        FormComponent,\n                        DisableControlDirective,\n                        FormGroupComponent,\n                        FormFieldContainerComponent,\n                        FormFieldCodeComponent,\n                        FormFieldInputComponent,\n                        FormFieldTextareaComponent,\n                        FormFieldSelectComponent,\n                        FormFieldCheckboxComponent,\n                        FormFieldFileComponent,\n                        FileValueAccessorDirective,\n                        MatFileInputDirective,\n                    ],\n                },] }\n    ];\n    return UniformModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormField = /** @class */ (function () {\n    function FormField(_a) {\n        var controlType = _a.controlType, key = _a.key, value = _a.value, label = _a.label, _b = _a.required, required = _b === void 0 ? false : _b, _c = _a.hidden, hidden = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.placeholder, placeholder = _e === void 0 ? '' : _e, _f = _a.description, description = _f === void 0 ? '' : _f, minLength = _a.minLength, maxLength = _a.maxLength, pattern = _a.pattern, showIf = _a.showIf, _g = _a.validators, validators = _g === void 0 ? [] : _g, _h = _a.default, defaultValue = _h === void 0 ? null : _h;\n        this.CONTROL_TYPES = CONTROL_TYPES;\n        this.key = key;\n        if (!this.key) {\n            throw new TypeError('key is required');\n        }\n        this.controlType = controlType;\n        if (CONTROL_TYPES[(/** @type {?} */ (controlType))]) {\n            this.controlType = CONTROL_TYPES[(/** @type {?} */ (controlType))];\n        }\n        if (!this.controlType) {\n            throw new TypeError('controlType is required');\n        }\n        this.label = label;\n        if (typeof this.label === 'undefined') {\n            throw new TypeError('label is required');\n        }\n        this.validators = validators;\n        this.required = required;\n        if (required) {\n            this.validators.push(Validators.required);\n        }\n        this.minLength = minLength;\n        if (minLength) {\n            this.validators.push(Validators.minLength(minLength));\n        }\n        this.maxLength = maxLength;\n        if (maxLength) {\n            this.validators.push(Validators.maxLength(maxLength));\n        }\n        this.pattern = pattern;\n        if (pattern) {\n            this.validators.push(Validators.pattern(pattern));\n        }\n        if (showIf) {\n            /** @type {?} */\n            var schema = Object.assign({}, showIf, {\n                additionalProperties: true,\n            });\n            /** @type {?} */\n            var ajv = new Ajv({ validateSchema: 'log', missingRefs: 'ignore' });\n            this.showIfSchema = ajv.compile(schema);\n        }\n        this.hidden = hidden;\n        this.disabled = disabled;\n        this.default = value != null ? value : defaultValue;\n        this.description = description;\n        this.placeholder = placeholder;\n    }\n    Object.defineProperty(FormField.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new FormControl({\n                value: this.default,\n                disabled: this.disabled,\n            }, this.validators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormField.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    FormField.prototype.isHidden = /**\n     * @param {?} form\n     * @return {?}\n     */\n    function (form) {\n        return this.hidden || (this.showIfSchema && !this.showIfSchema(form));\n    };\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    FormField.prototype.isDisabled = /**\n     * @param {?} form\n     * @return {?}\n     */\n    function (form) {\n        return this.disabled === true || (this.showIfSchema && !this.showIfSchema(form));\n    };\n    return FormField;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldCheckbox = /** @class */ (function (_super) {\n    __extends(FormFieldCheckbox, _super);\n    function FormFieldCheckbox(field) {\n        return _super.call(this, __assign({}, field, { controlType: CONTROL_TYPES.CHECKBOX })) || this;\n    }\n    Object.defineProperty(FormFieldCheckbox.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldCheckboxComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldCheckbox;\n}(FormField));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldCode = /** @class */ (function (_super) {\n    __extends(FormFieldCode, _super);\n    function FormFieldCode(_a) {\n        var _b = _a.options, options = _b === void 0 ? {} : _b, field = __rest(_a, [\"options\"]);\n        var _this = _super.call(this, __assign({}, field, { controlType: CONTROL_TYPES.CODE })) || this;\n        _this.options = options;\n        return _this;\n    }\n    Object.defineProperty(FormFieldCode.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldCodeComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldCode;\n}(FormField));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldFile = /** @class */ (function (_super) {\n    __extends(FormFieldFile, _super);\n    function FormFieldFile(_a) {\n        var _b = _a.fillForm, fillForm = _b === void 0 ? true : _b, _c = _a.accept, accept = _c === void 0 ? '.json,application/json' : _c, field = __rest(_a, [\"fillForm\", \"accept\"]);\n        var _this = _super.call(this, __assign({ placeholder: 'Click here to select or drop a file' }, field, { controlType: CONTROL_TYPES.FILE })) || this;\n        _this.fillForm = fillForm;\n        _this.accept = accept;\n        return _this;\n    }\n    Object.defineProperty(FormFieldFile.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldFileComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldFile;\n}(FormField));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldText = /** @class */ (function (_super) {\n    __extends(FormFieldText, _super);\n    function FormFieldText(field) {\n        return _super.call(this, __assign({}, field, { controlType: CONTROL_TYPES.TEXT })) || this;\n    }\n    Object.defineProperty(FormFieldText.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldInputComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldText;\n}(FormField));\nvar FormFieldNumber = /** @class */ (function (_super) {\n    __extends(FormFieldNumber, _super);\n    function FormFieldNumber(_a) {\n        var min = _a.min, max = _a.max, _b = _a.validators, validators = _b === void 0 ? [] : _b, field = __rest(_a, [\"min\", \"max\", \"validators\"]);\n        var _this = this;\n        if (min) {\n            validators.push(Validators.min(min));\n        }\n        if (max) {\n            validators.push(Validators.max(max));\n        }\n        _this = _super.call(this, __assign({}, field, { validators: validators, controlType: CONTROL_TYPES.NUMBER })) || this;\n        _this.min = min;\n        _this.max = max;\n        return _this;\n    }\n    Object.defineProperty(FormFieldNumber.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldInputComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldNumber;\n}(FormField));\nvar FormFieldPassword = /** @class */ (function (_super) {\n    __extends(FormFieldPassword, _super);\n    function FormFieldPassword(field) {\n        return _super.call(this, __assign({}, field, { controlType: CONTROL_TYPES.PASSWORD })) || this;\n    }\n    Object.defineProperty(FormFieldPassword.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldInputComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldPassword;\n}(FormField));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldSelect = /** @class */ (function (_super) {\n    __extends(FormFieldSelect, _super);\n    function FormFieldSelect(_a) {\n        var _b = _a.options, options = _b === void 0 ? [] : _b, field = __rest(_a, [\"options\"]);\n        var _this = _super.call(this, __assign({}, field, { controlType: CONTROL_TYPES.SELECT })) || this;\n        _this.options = [];\n        _this.options = options;\n        return _this;\n    }\n    Object.defineProperty(FormFieldSelect.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldSelectComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldSelect;\n}(FormField));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormFieldTextarea = /** @class */ (function (_super) {\n    __extends(FormFieldTextarea, _super);\n    function FormFieldTextarea(field) {\n        return _super.call(this, __assign({}, field, { controlType: CONTROL_TYPES.TEXTAREA })) || this;\n    }\n    Object.defineProperty(FormFieldTextarea.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return FormFieldTextareaComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormFieldTextarea;\n}(FormField));\n\nvar _a, _b;\nvar UniformService = /** @class */ (function () {\n    function UniformService() {\n    }\n    /**\n     * @param {?=} groups\n     * @return {?}\n     */\n    UniformService.factory = /**\n     * @param {?=} groups\n     * @return {?}\n     */\n    function (groups) {\n        if (groups === void 0) { groups = []; }\n        return groups.map((/**\n         * @param {?} group\n         * @return {?}\n         */\n        function (group) { return (__assign({}, group, { fields: flatten(group.fields.map((/**\n             * @param {?} field\n             * @return {?}\n             */\n            function (field) { return UniformService.fieldFactory(field); }))) })); }));\n    };\n    /**\n     * @param {?} __0\n     * @param {?=} throwError\n     * @return {?}\n     */\n    UniformService.fieldFactory = /**\n     * @param {?} __0\n     * @param {?=} throwError\n     * @return {?}\n     */\n    function (_a, throwError) {\n        if (throwError === void 0) { throwError = false; }\n        var controlType = _a.controlType, controlGroupType = _a.controlGroupType, field = __rest(_a, [\"controlType\", \"controlGroupType\"]);\n        /** @type {?} */\n        var err;\n        if (controlGroupType) {\n            /** @type {?} */\n            var controlGroupFieldsFactory = UniformService.CONTROL_GROUPS[controlGroupType];\n            if (!controlGroupFieldsFactory) {\n                err = new TypeError(\"Group type \\\"\" + controlGroupType + \"\\\" is not supported\");\n                if (throwError) {\n                    throw err;\n                }\n                console.error('Ignoring field', field, err);\n                return [];\n            }\n            return controlGroupFieldsFactory(field);\n        }\n        if (controlType) {\n            /** @type {?} */\n            var Control = UniformService.CONTROLS[controlType];\n            if (!Control) {\n                err = new TypeError(\"Type \\\"\" + controlType + \"\\\" is not supported\");\n                if (throwError) {\n                    throw err;\n                }\n                console.error('Ignoring field', field, err);\n                return [];\n            }\n            try {\n                return [new Control(field)];\n            }\n            catch (err) {\n                if (throwError) {\n                    throw err;\n                }\n                console.error('Ignoring field', field, err);\n                return [];\n            }\n        }\n        err = new TypeError('Type is not specified');\n        if (throwError) {\n            throw err;\n        }\n        console.error('Ignoring field', { controlType: controlType, controlGroupType: controlGroupType, field: field }, err);\n        return [];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.amazonFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldText({\n                key: key + \".AWS_ACCESS_KEY_ID\",\n                label: 'AWS Access Key ID',\n                required: true,\n                value: value['AWS_ACCESS_KEY_ID'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".AWS_SECRET_ACCESS_KEY\",\n                label: 'AWS Secret Access Key',\n                required: true,\n                value: value['AWS_SECRET_ACCESS_KEY'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.alibabaFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldText({\n                key: key + \".ALIBABA_ACCESS_KEY_ID\",\n                label: 'Alibaba Access Key ID',\n                required: true,\n                value: value['ALIBABA_ACCESS_KEY_ID'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".ALIBABA_ACCESS_KEY_SECRET\",\n                label: 'Alibaba Secret Access Key',\n                required: true,\n                value: value['ALIBABA_ACCESS_KEY_SECRET'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.azureFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldText({\n                key: key + \".AZURE_CLIENT_ID\",\n                label: 'Azure Client ID',\n                required: true,\n                value: value['AZURE_CLIENT_ID'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".AZURE_CLIENT_SECRET\",\n                label: 'Azure Client Secret',\n                required: true,\n                value: value['AZURE_CLIENT_SECRET'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".AZURE_TENANT_ID\",\n                label: 'Azure Tenant ID',\n                required: true,\n                value: value['AZURE_TENANT_ID'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".AZURE_SUBSCRIPTION_ID\",\n                label: 'Azure Subscription ID',\n                required: true,\n                value: value['AZURE_SUBSCRIPTION_ID'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.googleFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldFile({\n                key: key + \".json_key\",\n                label: 'Service account key',\n                description: 'Fill out the form by providing a JSON key file',\n                value: value['json_key'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".service_account\",\n                label: 'Type',\n                required: true,\n                default: 'service_account',\n                value: value['service_account'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".project_id\",\n                label: 'Project Id',\n                required: true,\n                value: value['project_id'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".private_key_id\",\n                label: 'Project Key Id',\n                required: true,\n                value: value['private_key_id'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".private_key\",\n                label: 'Private Key',\n                required: true,\n                value: value['private_key'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".client_email\",\n                label: 'Client email',\n                required: true,\n                value: value['client_email'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".client_id\",\n                label: 'Client Id',\n                required: true,\n                value: value['client_id'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".auth_uri\",\n                label: 'Auth URI',\n                required: true,\n                default: 'https://accounts.google.com/o/oauth2/auth',\n                value: value['auth_uri'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".token_uri\",\n                label: 'Token URI',\n                required: true,\n                default: 'https://accounts.google.com/o/oauth2/token',\n                value: value['token_uri'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".auth_provider_x509_cert_url\",\n                label: 'Auth Provider X509 Cert URL',\n                required: true,\n                default: 'https://www.googleapis.com/oauth2/v1/certs',\n                value: value['auth_provider_x509_cert_url'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".client_x509_cert_url\",\n                label: 'Client X509 Cert URL',\n                required: true,\n                value: value['client_x509_cert_url'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.oracleFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldText({\n                key: key + \".user_ocid\",\n                label: 'User OCID',\n                required: true,\n                value: value['user_ocid'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".api_key\",\n                label: 'API key',\n                required: true,\n                value: value['api_key'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".api_key_fingerprint\",\n                label: 'API key fingerprint',\n                required: true,\n                value: value['api_key_fingerprint'],\n                showIf: showIf,\n            }),\n            new FormFieldSelect({\n                key: key + \".region\",\n                label: 'Region',\n                required: true,\n                value: value['region'],\n                options: [\n                    {\n                        label: 'EU West (Frankfurt, Germany)',\n                        value: 'eu-frankfurt-1',\n                    },\n                    {\n                        label: 'EU West (London, United Kingdom)',\n                        value: 'uk-london-1',\n                    },\n                    {\n                        label: 'US East (Ashburn, VA)',\n                        value: 'us-ashburn-1',\n                    },\n                    {\n                        label: 'US West (Phoenix, AZ)',\n                        value: 'us-phoenix-1',\n                    },\n                ],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".compartment_ocid\",\n                label: 'Compartment OCID',\n                required: true,\n                value: value['compartment_ocid'],\n                showIf: showIf,\n            }),\n            new FormFieldText({\n                key: key + \".tenancy_ocid\",\n                label: 'Tenancy OCID',\n                required: true,\n                value: value['tenancy_ocid'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.passwordFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldText({\n                key: key + \".username\",\n                label: 'username',\n                required: true,\n                value: value['username'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".password\",\n                label: 'password',\n                minLength: 8,\n                placeholder: 'Auto-generated when left empty',\n                value: value['password'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    UniformService.tlsFields = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var key = _a.key, showIf = _a.showIf, _b = _a.value, value = _b === void 0 ? {} : _b;\n        return [\n            new FormFieldText({\n                key: key + \".hosts\",\n                label: 'Hosts',\n                description: 'Host names separated by commas',\n                placeholder: 'example.com',\n                pattern: '^(?:(?:^|,))((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]).)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]))$',\n                value: value['hosts'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".caCert\",\n                placeholder: 'ca.cert',\n                label: 'Certificate authority certificate',\n                value: value['caCert'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".caKey\",\n                placeholder: 'ca.key',\n                label: 'Certificate authority key',\n                value: value['caKey'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".serverCert\",\n                placeholder: 'server.key',\n                label: 'Server certificate',\n                value: value['serverCert'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".serverKey\",\n                placeholder: 'server.key',\n                label: 'Server key',\n                value: value['serverKey'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".clientCert\",\n                placeholder: 'client.key',\n                label: 'Client certificate',\n                value: value['clientCert'],\n                showIf: showIf,\n            }),\n            new FormFieldPassword({\n                key: key + \".clientKey\",\n                placeholder: 'client.key',\n                label: 'Client key',\n                value: value['clientKey'],\n                showIf: showIf,\n            }),\n        ];\n    };\n    UniformService.CONTROLS = (_a = {},\n        _a[CONTROL_TYPES.CHECKBOX] = FormFieldCheckbox,\n        _a[CONTROL_TYPES.CODE] = FormFieldCode,\n        _a[CONTROL_TYPES.FILE] = FormFieldFile,\n        _a[CONTROL_TYPES.NUMBER] = FormFieldNumber,\n        _a[CONTROL_TYPES.PASSWORD] = FormFieldPassword,\n        _a[CONTROL_TYPES.SELECT] = FormFieldSelect,\n        _a[CONTROL_TYPES.TEXT] = FormFieldText,\n        _a[CONTROL_TYPES.TEXTAREA] = FormFieldTextarea,\n        _a);\n    UniformService.CONTROL_GROUPS = (_b = {},\n        _b[CONTROL_GROUP_TYPES.AMAZON] = UniformService.amazonFields,\n        _b[CONTROL_GROUP_TYPES.AZURE] = UniformService.azureFields,\n        _b[CONTROL_GROUP_TYPES.ALIBABA] = UniformService.alibabaFields,\n        _b[CONTROL_GROUP_TYPES.GOOGLE] = UniformService.googleFields,\n        _b[CONTROL_GROUP_TYPES.ORACLE] = UniformService.oracleFields,\n        _b[CONTROL_GROUP_TYPES.PASSWORD] = UniformService.passwordFields,\n        _b[CONTROL_GROUP_TYPES.TLS] = UniformService.tlsFields,\n        _b);\n    UniformService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root',\n                },] }\n    ];\n    /** @nocollapse */ UniformService.ngInjectableDef = defineInjectable({ factory: function UniformService_Factory() { return new UniformService(); }, token: UniformService, providedIn: \"root\" });\n    return UniformService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormFieldCheckbox, FormFieldCode, FormFieldFile, FormFieldText, FormFieldNumber, FormFieldPassword, FormFieldSelect, FormFieldTextarea, CONTROL_TYPES, CONTROL_GROUP_TYPES, UniformModule, UniformService, DisableControlDirective as ɵi, FormFieldContainerComponent as ɵk, FormField as ɵp, FormFieldCheckboxComponent as ɵf, FormFieldCodeComponent as ɵa, FileValueAccessorDirective as ɵl, FormFieldFileComponent as ɵg, MatFileInputDirective as ɵo, MatInputBase as ɵm, _MatInputMixinBase as ɵn, FormFieldInputComponent as ɵc, FormFieldSelectComponent as ɵe, FormFieldTextareaComponent as ɵd, FormFieldComponent as ɵb, FormGroupComponent as ɵj, FormComponent as ɵh };\n\n//# sourceMappingURL=banzaicloud-uniform.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div>\\n  <a style=\\\"display: none;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" download=\\\"anwsers.yaml\\\" #downloadLink></a>\\n  <mat-card class=\\\"container\\\">\\n    <div class=\\\"logo\\\"></div>\\n    <bcu-form\\n      *ngIf=\\\"(groups$ | async) as groups; else loadingOrError\\\"\\n      [groups]=\\\"groups\\\"\\n      [initialValue]=\\\"initialValue\\\"\\n      (valueChanges)=\\\"onValueChanges($event)\\\"\\n      (save)=\\\"onSave($event)\\\"\\n    ></bcu-form>\\n    <ng-template #loadingOrError>\\n      <div *ngIf=\\\"error; else loading\\\" class=\\\"error\\\">\\n        <pre>{{ error }}</pre>\\n      </div>\\n\\n      <ng-template #loading>\\n        <mat-progress-bar *ngIf=\\\"loading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\n      </ng-template>\\n    </ng-template>\\n  </mat-card>\\n</div>\\n\"","module.exports = \".container {\\n  max-width: 960px;\\n  padding: 24px;\\n  margin: 48px auto; }\\n\\n.logo {\\n  height: 32px;\\n  background: url('logo.svg') no-repeat;\\n  margin-bottom: 32px; }\\n\\n.error {\\n  color: #D32F2F;\\n  font-size: 1.3em;\\n  white-space: pre-wrap; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyYXN0b3RoL0RldmVsb3Blci9zcmMvZ2l0aHViLmNvbS9iYW56YWljbG91ZC91bmlmb3JtL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixpQkFBaUIsRUFBQTs7QUFHbkI7RUFDRSxZQUFZO0VBQ1oscUNBQXVDO0VBQ3ZDLG1CQUFtQixFQUFBOztBQUdyQjtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIscUJBQXFCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiA5NjBweDtcbiAgcGFkZGluZzogMjRweDtcbiAgbWFyZ2luOiA0OHB4IGF1dG87XG59XG5cbi5sb2dvIHtcbiAgaGVpZ2h0OiAzMnB4O1xuICBiYWNrZ3JvdW5kOiB1cmwoJy4vbG9nby5zdmcnKSBuby1yZXBlYXQ7XG4gIG1hcmdpbi1ib3R0b206IDMycHg7XG59XG5cbi5lcnJvciB7XG4gIGNvbG9yOiAjRDMyRjJGO1xuICBmb250LXNpemU6IDEuM2VtO1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG59XG4iXX0= */\"","import { Component, ElementRef, ViewChild, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\nimport { UniformService, CONTROL_TYPES, CONTROL_GROUP_TYPES, IFormFieldGroup, IFormField } from '@banzaicloud/uniform';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport * as yaml from 'js-yaml';\nimport * as fp from 'lodash/fp';\nimport { Observable, throwError } from 'rxjs';\n\nconst reduceObject = fp.reduce.convert({ cap: false });\nconst mapObject = fp.map.convert({ cap: false });\n\n// see https://codemirror.net/mode/index.html\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/yaml/yaml';\n// see https://codemirror.net/demo/placeholder.html\nimport 'codemirror/addon/display/placeholder';\n\n@Component({\n  selector: 'banzai-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  rawGroups: any[];\n  groups$: Observable<IFormFieldGroup[]>;\n  values: { [key: string]: any };\n  initialValue: any;\n  error: string;\n\n  @ViewChild('downloadLink')\n  downloadLink: ElementRef;\n\n  constructor(private http: HttpClient, private snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.groups$ = this.http\n      .get<{ name: string; description?: string; link?: string; fields: any[] }[]>('/api/v1/form')\n      .pipe(map((g) => UniformService.factory(g)))\n      .pipe(\n        catchError((err: HttpErrorResponse) => {\n          this.error = `${err.message}\\n\\n${err.error || ''}`;\n          return throwError(err);\n        }),\n      );\n  }\n\n  onValueChanges(event) {\n    // NOTE unused\n    this.values = event;\n  }\n\n  onSave(event) {\n    // NOTE download as file\n    // const groups = this.rawGroups.map((group) => ({\n    //   ...group,\n    //   fields: group.fields.map((field) => ({\n    //     ...field,\n    //     value: Object.keys(event)\n    //       .filter((key) => key === field.key || key.startsWith(`${field.key}.`))\n    //       .reduce((value, key) => fp.set(key, event[key], value), {}),\n    //   })),\n    // }));\n\n    // const data = yaml.safeDump(groups);\n    // const blob = new Blob([data], { type: 'text/vnd.yaml' });\n    // const url = window.URL.createObjectURL(blob);\n    // this.downloadLink.nativeElement.href = url;\n    // this.downloadLink.nativeElement.click();\n    // window.URL.revokeObjectURL(blob);\n    // this.downloadLink.nativeElement.href = '';\n\n    const values = reduceObject((v, val, key) => fp.set(key, val, v), {})(event);\n\n    this.http\n      .post('/api/v1/form', values, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n        }),\n      })\n      .pipe(\n        catchError((err: HttpErrorResponse) => {\n          this.error = `${err.message}\\n\\n${err.error || ''}`;\n          return throwError(err);\n        }),\n      )\n      .subscribe(() => {\n        this.snackBar.open('Form values has been saved to config file', '⤬');\n      });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UniformModule } from '@banzaicloud/uniform';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, HttpClientModule, UniformModule, MatCardModule, MatProgressBarModule, MatSnackBarModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}